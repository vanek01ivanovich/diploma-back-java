find.user.by.email.with.password=select id, password, name, surname, email, role, is_enabled from \"user\" where email = ?
find.user.by.id = select id, name, surname, email, role, is_enabled from \"user\" where id = ?
update.user.by.id = update \"user\" set email = ?, name = ?, surname = ?, role = ?, is_enabled = ? WHERE id = ?
count.users = select count(id) from \"user\"
get.users = select id, name, surname, email, role, is_enabled from \"user\" where name like ? and surname like ? and email like ? and role ?
count.users.search=select count(id) from \"user\" where name like ? and surname like ? and email like ? and role like ?
insert.user = INSERT INTO \"user\" (email, password, name, surname, role, is_enabled) VALUES (?, ?, ?, ?, ?, ?)
get.user.email.by.id=SELECT email FROM \"user\" WHERE id = ?
update.user.password = UPDATE \"user\" SET "password" = ? WHERE email = ?
update.user.settings = UPDATE \"user\" SET "name" = ?, surname = ? WHERE email = ?
get.user.id.by.email = select id from \"user\" where email = ?
check.if.user.email.exists = SELECT COUNT(*) FROM  \"user\" WHERE email =?
count.users.by.role = Select count(*) from "user" WHERE role=?

get.all.actions = select * from action 
get.action.variable.by.action.id = select a.id,a.name action_name,a.description action_description, v.name variable_name from variable v join action a on a.id = v.action_id where a.id = ?;
find.actions.by.name = select * from action where LOWER(name) = LOWER(?) 
get.number.of.actions = SELECT count(*) from action;
find.action.all.with.id.name=SELECT id, name, is_void FROM action
update.action.description = update action set description = ? where id = ?;

create.action.executions = insert into action_execution(test_case_execution_id,action_instance_id,status) values(?,?,?);
get.list.of.action.executions = select ae.id action_execution_id, av.action_id,av.action_name, av.adescritpion action_description,av.is_void action_is_void,av.var_name variable_name, va.test_case_name,de.key variable_key,de.value variable_value,va.test_case_id, ae.test_case_execution_id,ae.status from action_execution ae join ( select vv.data_entry_id,vv.variable_id,ac_com_ins.action_instance_id,vv.test_case_id,tce.test_case_name from variable_value vv join( select tc.id test_case_id,tce.id test_case_execution_id,tc.name test_case_name from test_case_execution tce join test_case tc on tc.id = tce.test_case_id ) tce on tce.test_case_id = vv.test_case_id left outer join( select ai.id action_instance_id,ai.compound_instance_id from action_instance ai left outer join compound_instance ci on ci.id = ai.compound_instance_id ) ac_com_ins on ac_com_ins.action_instance_id =  vv.action_instance_id where tce.test_case_execution_id = ? ) va on va.action_instance_id = ae.action_instance_id join data_entry de on de.id = va.data_entry_id join ( select a.id action_id,a.name action_name, a.description adescritpion,a.is_void, v.name var_name,v.id var_id from variable v join action a on a.id = v.action_id) av on av.var_id = va.variable_id where ae.test_case_execution_id =? 
get.count.action.executions = select count(*) from action_execution ae join action_instance ai on ai.id = ae.action_instance_id join action a on a.id = ai.action_id join variable v on v.action_id = a.id where test_case_execution_id = ? 
get.number.of.failed.passed.action.executions = select count(ae.status) quantity, to_char(tce.end_date_time, 'yyyy.MM.dd') date from action_execution ae join test_case_execution tce on ae.test_case_execution_id = tce.id where ae.status = ? group by date;

get.action.instance.by.test.case=select action_instance.id as action_instance_id, action_instance.test_scenario_id as test_scenario_id, action_instance.priority, compound_inst.priority as compound_priority, compound_inst.compound_id, compound_inst.description as compound_description, compound_inst.name as compound_name, compound_instance_id, variable_id, variable_name, action_variable.action_id, action_name, action_description from action_instance left outer join (select compound_instance.id, compound_id, priority, c.name, c.description from compound_instance join compound c on compound_instance.compound_id = c.id) compound_inst on action_instance.compound_instance_id = compound_inst.id join (select variable.id as variable_id, variable.name as variable_name, action_id, a.name as action_name, a.description as action_description from variable join action a on a.id = variable.action_id) action_variable on action_variable.action_id = action_instance.action_id where action_instance.test_scenario_id = ?
insert.action.instance.with.compound.instance.id=INSERT INTO action_instance(test_scenario_id, compound_instance_id, action_id, priority, context_instance_name) VALUES(?,?,?,?,?)
insert.action.instance.without.compound.instance.id=INSERT INTO action_instance(test_scenario_id, action_id, priority, context_instance_name) VALUES(?,?,?,?)


get.data.set.by.id = select * from data_set where id = ?;
create.data.set = insert into data_set (name) values (?) returning id

get.data.entry.by.data.set.id = select * from data_entry where data_set_id = ?;
update.data.set.by.name = update data_set set name = ? where id = ?;
update.data.entry = update data_entry set value = ?, key = ? where id = ?;
insert.data.entry.default = insert into data_entry (data_set_id,value,key) values (?, ?, ?);
delete.data.entry.by.id = delete from data_entry where id = ?;

find.project.all=SELECT * FROM project WHERE name LIKE '%s%%' AND link LIKE '%s%%' AND is_archived=%b ORDER BY %s %s LIMIT %d OFFSET %d

find.compound.all=SELECT * FROM compound WHERE name LIKE '%s%%' ORDER BY %s LIMIT %d OFFSET %d

find.compound.all.with.id.name=SELECT id, name FROM compound
find.compound.quantity=SELECT count(*) FROM compound WHERE name LIKE ?;

insert.test.scenario=INSERT INTO test_scenario(name) VALUES (?) returning id
update.test.scenario.by.id=UPDATE test_scenario SET name=?, is_archived=? WHERE id=?
select.test.scenario.exist=SELECT EXISTS(SELECT id FROM test_scenario WHERE name=?)

insert.compound.instance=INSERT INTO compound_instance(compound_id, test_scenario_id, priority) VALUES(?,?,?) returning id

get.datasets=select id, name from \"data_set\" order by name
get.data.entries.by.dataset.id=select id, value, key, data_set_id from \"data_entry\" where data_set_id=?
get.test.scenarios=select id, name from \"test_scenario\"
get.test.scenario.by.id=select * from test_scenario WHERE id=?

insert.test.case=insert into test_case(name, user_id, project_id, data_set_id, test_scenario_id)  values(?, ?, ?, ?, ?)
insert.variable.value=insert into variable_value(variable_id, action_instance_id, data_entry_id, test_case_id) values (?, ?, ?, ?)

insert.compound.actions = insert into compound_action values(DEFAULT,?,?,?);
get.compound.action.with.action.id.and.priority=SELECT action_id, priority FROM compound_action WHERE compound_id=?
get.compound.actions.with.id.name.void.by.compound.id=SELECT id, name, is_void FROM action WHERE id IN (SELECT action_id FROM compound_action WHERE compound_id=?)
update.compound.archive=UPDATE compound SET is_archived=TRUE WHERE id=?

check.if.compound.name.exist = select count(name) > 0 from compound where name = ?;
insert.compound = insert into compound values(DEFAULT,?,?);
get.project.by.id=select * from project where id=?
count.projects=select count(id) from project where name LIKE ? AND link LIKE ? AND is_archived=?
insert.project=insert into project (name, link, is_archived, user_id) values  (?, ?, ?, ?)

delete.data.set = update data_set set is_archived = true where id = ?;
delete.data.entry = delete from data_entry where data_entry.data_set_id = ?;
get.all.data.sets = select id, name from data_set where is_archived = false order by id DESC;

get.test.case.steps=select tc.is_archived as test_case_is_archived, variable_value.id as variable_value_id, variable_value.test_case_id as test_case_id, tc.project_id as test_case_project_id, tc.name as test_case_name, tc.data_set_id   as test_case_data_set_id, tc.test_scenario_id as test_case_test_scenario_id, tc.user_id as test_case_user_id, tc.project_link as test_case_project_link, tc.project_name as test_case_project_name, de.id as data_entry_id, de.data_set_id   as data_set_id, de.value  as data_entry_value, de.key as data_entry_key, ai.action_instance_id, ai.test_scenario_id, ai.priority, ai.compound_instance_id, compound_priority, compound_id, compound_description, compound_name, ai.action_id as action_id, action_name, action_description, v.id as variable_id, v.name as variable_name from variable_value join data_entry de on variable_value.data_entry_id = de.id join variable v on v.id = variable_value.variable_id join (select action_instance.id as action_instance_id, action_instance.test_scenario_id as test_scenario_id, action_instance.priority, compound_inst.priority as compound_priority, compound_inst.compound_id, compound_inst.description as compound_description, compound_inst.name as compound_name, compound_instance_id, a.name as action_name, a.description as action_description, action_id from action_instance left outer join (select compound_instance.id, compound_id, priority, c.name, c.description from compound_instance join compound c on compound_instance.compound_id = c.id) compound_inst on action_instance.compound_instance_id = compound_inst.id join action a on action_instance.action_id = a.id) ai on ai.action_instance_id = variable_value.action_instance_id join (select test_case.id, test_case.project_id, test_case.name,test_case.is_archived, test_case.data_set_id, test_case.test_scenario_id, test_case.user_id, p.link as project_link, p.name as project_name from test_case join project p on test_case.project_id = p.id) tc on variable_value.test_case_id = tc.id where test_case_id = ?
get.test.scenario.page= SELECT id, name FROM "test_scenario" where name like ?
count.test.scenario = SELECT count(id) from "test_scenario"


get.test.case.page= SELECT id, name FROM "test_case" where project_id = ? and name like ?
count.test.cases = SELECT count(id) from "test_case" where project_id = ?
get.compound.by.id = select * from compound where id = ?;
get.compound.actions = select c.id,c.name,a.name,a.description,ca.priority from compound_action ca join compound c on c.id = ca.compound_id join action a on a.id = ca.action_id where c.id = ? order by priority;

dashboard.top.subscribed.test.cases=SELECT subscr.*, test_case.name as test_case_name, project.id as project_id, project.name as project_name FROM (SELECT test_case_id, count(test_case_id) as quantity FROM subscription GROUP BY test_case_id ORDER BY quantity DESC LIMIT 5 ) as subscr INNER JOIN test_case ON subscr.test_case_id = test_case.id INNER JOIN project ON test_case.project_id = project.id ORDER BY subscr.quantity DESC

dashboard.grouped.number.of.test.case.execution = select test_case_execution.test_case_id,test_case.name, count(test_case_execution.test_case_id) test_case_executions from test_case_execution join test_case on test_case.id = test_case_execution.test_case_id group by test_case_execution.test_case_id,test_case.name having count(test_case_execution.test_case_id) > 4 limit 12;


update.variable.value.data.entry=update variable_value set data_entry_id=? where id=?
update.test.case.name=update test_case set name=? where id=?
get.project.dto.by.id=select user_id, u.name as user_name, u.surname as user_surname, u.email as user_email, u.is_enabled as user_is_enabled, u.role as user_role, project.id, project.name, project.link, project.is_archived from \"user\" u join project on u.id = project.user_id where project.id = ?
update.project=update project set name=?, link=? where id=?
update.archive.project=update project set is_archived=? where id=?
update.archive.test.case=update test_case set is_archived=? where id=?

insert.subscription=insert into subscription(user_id, test_case_id) values(?, ?)
exist.subscription=select exists (select * from subscription where test_case_id=? and user_id=?);
delete.subscription=delete from subscription where test_case_id=? and user_id=?
set.notifications = INSERT INTO notification (test_case_execution_id, user_id) SELECT t.id, s.user_id FROM test_case_execution t INNER JOIN test_case c ON c.id = t.test_case_id INNER JOIN \"subscription\" s ON s.test_case_id = c.id WHERE t.test_case_id=? AND t.id=?
get.notification.test.case_execution = SELECT test_case_execution_id FROM notification WHERE user_id=?
get.notification.users = SELECT user_id FROM notification WHERE test_case_execution_id=?
get.recent.notifications = SELECT t.id FROM test_case_execution t INNER JOIN test_case c ON c.id = t.test_case_id INNER JOIN \"subscription\" s ON s.test_case_id = c.id WHERE t.test_case_id=? AND t.id=?
get.notifications.by.user = SELECT tce.status, to_char(tce.start_date_time, 'dd.MM.yyyy HH24:MI:SS'), tc.name, tce.id FROM notification n INNER JOIN test_case_execution tce ON n.test_case_execution_id = tce.id INNER JOIN test_case tc ON tce.test_case_id = tc.id WHERE n.user_id=?
get.amount.of.notifications = SELECT count(id) FROM notification WHERE user_id=?
delete.notification = DELETE FROM notification WHERE test_case_execution_id=? and user_id=?

get.all.test.case.execution.with.failed.action.number = select distinct tce.id, tce.status, to_char(tce.start_date_time, 'dd.MM.yyyy HH24:MI:SS'), to_char(tce.end_date_time, 'dd.MM.yyyy HH24:MI:SS'), tce.user_id, tc.name, p.name, failed_actions from test_case_execution tce left outer join action_execution ae on tce.id = ae.test_case_execution_id left outer join test_case tc on tce.test_case_id = tc.id left outer join project p on tc.project_id = p.id left outer join (select test_case_execution_id, count(status) failed_actions from action_execution where status = 'FAILED' group by test_case_execution_id) number_failed_actions on number_failed_actions.test_case_execution_id = tce.id;
get.all.test.case.execution.with.failed.action.number.v2 = select tce.id, tce.status, to_char(tce.start_date_time, 'dd.MM.yyyy HH24:MI:SS'), to_char(tce.end_date_time, 'dd.MM.yyyy HH24:MI:SS'), tce.user_id, tc.name, p.name, count(ae.status) from test_case_execution tce left outer join action_execution ae on tce.id = ae.test_case_execution_id left outer join test_case tc on tce.test_case_id = tc.id left outer join project p on tc.project_id = p.id  group by tce.id, tce.status, tce.start_date_time, tce.end_date_time, tce.user_id, tc.name, p.name;

get.page.test.case.executions = select tce.id id, tce.status, to_char(tce.start_date_time, 'dd.MM.yyyy HH24:MI:SS') start_date_time, to_char(tce.end_date_time, 'dd.MM.yyyy HH24:MI:SS') end_date_time, tce.user_id, tc.name test_case_name, p.name project_name, all_actions, passed_actions from test_case_execution tce join test_case tc on tce.test_case_id = tc.id join project p on tc.project_id = p.id left join (select test_case_execution_id, count(status) all_actions from action_execution group by test_case_execution_id) all_actions on all_actions.test_case_execution_id = tce.id left join (select test_case_execution_id, count(status) passed_actions from action_execution where status = 'PASSED' group by test_case_execution_id) passed_actions on passed_actions.test_case_execution_id = tce.id where tc.name like ? and p.name like ?
count.test.case.executions = select count(id) from test_case_execution
count.test.case.executions.search = select count(tce.id) from test_case_execution tce join test_case tc on tce.test_case_id = tc.id join project p on tc.project_id = p.id left join (select test_case_execution_id, count(status) all_actions from action_execution group by test_case_execution_id) all_actions on all_actions.test_case_execution_id = tce.id left join (select test_case_execution_id, count(status) passed_actions from action_execution where status = 'PASSED' group by test_case_execution_id) passed_actions on passed_actions.test_case_execution_id = tce.id where tc.name like ? and p.name like ?
get.test.case.execution.by.id = SELECT tce.status, to_char(tce.start_date_time, 'dd.MM.yyyy HH24:MI:SS') FROM test_case_execution tce WHERE id=?
get.test.case.by.id = SELECT name FROM test_case WHERE id=?

select.test.case.executions.group.by.creation.date = select date(start_date_time) as date, count(id) as number_of_executions from test_case_execution where date(start_date_time) between ? and ? group by date(start_date_time) order by date(start_date_time)


get.all.test.case.execution = select id,test_case_id,status, to_char(start_date_time, 'dd.MM.yyyy HH24:MI:SS'), to_char(end_date_time, 'dd.MM.yyyy HH24:MI:SS'), user_id from test_case_execution
create.test.case.execution = insert into test_case_execution (test_case_id, status, start_date_time, end_date_time, user_id) values (?, ?, now(), null, ?) returning id
update.test.case.execution = update test_case_execution set status = ?, end_date_time = now() where id = ?

get.subscribed.users = select s.id subscribe_id,u.name user_name, u.email user_email,s.test_case_id,tc.tcname from subscription s join "user" u on u.id = s.user_id join (select tc.id,tc.name tcname from test_case_execution tce join test_case tc on tc.id = tce.test_case_id where tce.id = ?) tc on tc.id = s.test_case_id;
get.test.case.with.user.creator = select tc.id as id, tc.name as name, u.email as email from \"test_case\" as tc join \"user\" as u on tc.user_id = u.id where tc.project_id = ? and tc.name like ?

get.user.count = select count(*) as user_count, count(case role when 'ROLE_ADMIN' then 1 else null end) as admin_count, count(case role when 'ROLE_MANAGER' then 1 else null end) as manager_count, count(case role when 'ROLE_ENGINEER' then 1 else null end) as engineer_count from \"user\"


find.user.by.email=select id, name, surname, email, role, is_enabled from \"user\" where email = ?
find.compound.by.id = SELECT id, name, description FROM compound WHERE id = ?
find.comp.action.by.id = SELECT action_id, priority FROM compound_action WHERE compound_id = ? ORDER BY priority
update.compound = UPDATE compound SET "name" = ?, description = ? WHERE id = ?;
insert.comp.action.list = "INSERT INTO compound_action (id, action_id, priority) VALUES (?, ?, ?)"



